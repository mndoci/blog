---
title: PEP8, pyflakes and PyUnit for Vim
author: Vincent Driessen
image: ppp.png
created_at: 2010-09-15
updated_at: 2010-09-18
kind: article
published: false
disqus_id: 'pep8-pyflakes-and-pyunit-for-vim'
---
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam lacus ligula,
accumsan id imperdiet rhoncus, dapibus vitae arcu. Nulla non quam erat, luctus
consequat nisi. Integer hendrerit lacus sagittis erat fermentum tincidunt. Cras
vel dui neque. In sagittis commodo luctus. Mauris non metus dolor, ut suscipit
dui. Aliquam mauris lacus, laoreet et consequat quis, bibendum id ipsum. Donec
gravida, diam id imperdiet cursus, nunc nisl bibendum sapien, eget tempor neque
elit in tortor. Mauris gravida, purus at ultrices sollicitudin, purus diam
dapibus leo, ut eleifend dolor tellus feugiat lacus. Class aptent taciti
sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nam ut
orci.


h3. Python: PEP8, pyflakes and unit test integration

In essence, Vim is a text editor.  It is not an integrated development
environment.  However, since it is so extendible, you can come a long way to
such a situation nevertheless.

Many plugins are available that cover a lot of "IDE functionality" already.
Sometimes however, you need functionality that you cannot find in an already
available plugin (or in a way that doesn't fit your need).  In those cases, you
can extend Vim yourself.

This happened to me when I started doing a lot of Python development.  I often
want to run QA tools (like @pep8@ or @pyflakes@) on my Python source code.
There are plugins for those tools available, but

* they don't allow me to customize any key mappings
* they don't look/act/behave the same, although they may be considered the same
  type of tools (i.e. they tell me on what lines there's something wrong with
  my Python source)
* in the best case, they are merely a simple wrapper around a shell invocation

Before I've tried these plugins, I had an ad hoc key mapping defined to call
@pep8 -r@ on the current file.  Vim would show me the shell output, I'd
remember a line number, press Return, type [@:n@] (where @n@ is the line
number) and start fixing it.

However, you can get it a lot better than that.  I dove into the details of
@makeprg@, @makeformat@ and the quickfix window, and came up with the following
coherent set of plugins:

* "vim-pep8":http://github.com/nvie/vim-pep8
* "vim-pyflakes":http://github.com/nvie/vim-pyflakes
* "vim-pyunit":http://github.com/nvie/vim-pyunit

Each of them is usable on its own, but they complete each other beautifully.

I started creating the first two, since those where the simplest.  The base
where I started off from was a list of functions I found in Gary Bernhardt's
"@.vimrc@":http://bitbucket.org/garybernhardt/dotfiles/src/tip/.vimrc file.  I
liked the idea of his unit testing functions showing a red or a green bar,
since it somehow is a visually pleasing result.  Gary did a splendid job
already in setting up the basic logic for this, but his code was rather
intertwined within his @.vimrc@ file and not easily reusable.

Going from there, I decided to learn a bit of the Vim script language and come
up with my own.

h3. PEP8

The PEP8-plugin checks whether your Python file comforms to the "PEP8 style
guide":http://www.python.org/dev/peps/pep-0008/. There is a simple tool called
"@pep8@":http://pypi.python.org/pypi/pep8 that can do that check automatically
for you.  It simply returns output that looks like this:

bc. $ pep8 urls.py
urls.py:10:1: E302 expected 2 blank lines, found 1
urls.py:12:3: E111 indentation is not a multiple of four
urls.py:16:80: E501 line too long (99 characters)

The "@vim-pep8@":http://github.com/nvie/vim-pep8 plugin uses Vim's @grepprg@
functionality to turn that output into a quickfix list (see @:h quickfix@) that
looks something like this:

!/img/2010/08/quickfix-window.png!

Or something like this when the file is clean:

!/img/2010/08/pep8-safe.png!

When you install the plugin into your @.vim/bundle/pep8@ directory (you use
"pathogen":#pathogen, right?), you get this functionality mapped by default
under the @<F6>@ key.  If you wish to remap this, you can easily do so with the
following command (which puts it under @,p@ for example):

<pre><code class="language-vim">
autocmd filetype python map <buffer> ,p :call Pep8()<CR>
</code></pre>


h3. pyflakes

The static compile-time syntax checker
"pyflakes":http://divmod.org/trac/wiki/DivmodPyflakes is a tool for quickly
checking whether there are typo's or bugs in your code that could lead to
untime issues.


h3. PyUnit

...


