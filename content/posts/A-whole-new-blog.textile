---
title: A whole new blog
author: Vincent Driessen
image: old-blog.png
created_at: 2010-09-07
updated_at: 2010-09-10
kind: article
published: false
alt_url: /newblog
---
Finally, I've made the move to a static blog engine!  I'm using
"nanoc":http://nanoc.stoneship.org/ now. nanoc is a very flexible and
customizable static site generator, written by "Denis
Defreyne":http://twitter.com/ddfreyne.

As with all static site generators, nanoc lets you write your source files in a
simple markup language.  Out of the box, nanoc offers you the choice of using
Markdown, Textile, reStructuredText or plain HTML (with or without embedded
Ruby).  In fact, nanoc is nothing more than a generator honoring a @Rules@-file
that tells it how to compile, layout and route the site's items.

h2. Compiling items

An "item" is a file on your website.  It can be any kind of file, like a web
site page (HTML), an image, a JavaScript or CSS file or an RSS feed.  During
the compile phase, you specify which sequential actions should be performed on
the _content_ of that item.  These actions are called *filters*.  Some examples
of filters are an embedded ruby filter, a
"Textile-to-HTML":http://redcloth.org/ converter, a "less":http://lesscss.org/
compiler, or minify "CSS":http://code.google.com/p/rainpress/.  Filters can be
chained, for example:

<pre><code class="language-ruby">
compile '/static/css/*/' do
    # compress CSS :)
    filter :less
    filter :rainpress
end
</code></pre>

Which turns @.less@-files into compressed CSS:

!/img/2010/09/less2css.png!

Any filter you can imagine, nanoc can handle. nanoc comes with a lot of filters
"out of the box":http://nanoc.stoneship.org/docs/4-basic-concepts/#filters, but
even "writing your own":http://nanoc.stoneship.org/docs/5-advanced-concepts/#writing-filters
filters really is a piece of cake.

h2. Routing items

After compiling (i.e. transforming content through filters) comes the routing
of the items.  This is a means of assigning file names to compiled content.
nanoc calculates default files names from the input, but you can use this to
influence the default naming.  A special case is where you set the route to
@Nil@ which doesn't write the file at all.  I use this to test draft posts
locally, like this (oh, did I mention the @Rules@ file is 100% Ruby?):

<pre><code class="language-ruby">
route '/posts/*/' do
    if $include_drafts or @item[:published] then
        '/posts/' + @item.slug + '/index.html'
    end
end
</code></pre>

h2. Laying out items

Finally, layouts are applied.  Layouts are kind of templates that can be used
to "frame" the item's contents.  This is typically used for HTML files only,
Obut isn't limited to it.  For example, the blog posts are compiled into
(partial) HTML, and the layout rules put the site's container HTML around it,
adding CSS styling, jQuery scripts, the header, sidebars and footer and Google
Analytics tracking (these go for each page).  There's a special extra layout
rule for blog post pages, which additionally adds Disqus comments.

h2. Summary

Each build of this blog also automatically:

* Converts "Textile":http://redcloth.org/ content to HTML
* Highlights syntax using "pygments":http://pygments.org/
* Converts "less":http://lesscss.org/ to CSS
* Minifies "CSS":http://code.google.com/p/rainpress/
* Minifies "JavaScript":http://code.google.com/closure/compiler/
* "Downsizes":http://www.graphicsmagick.org/convert.html source images
* Generates redirect pages for alternative (old-style) URL's (for user that have
  existing bookmarks to old Wordpress URL's)
* Generates a new blog post
  "RSS feed":http://nanoc.stoneship.org/docs/api/3.1/Nanoc3/Helpers/Blogging.html

In short, now nanoc is fully configured to my wishes, I can simply focus on
writing *blog content*, without preparing image content (it is done
automatically), and without having to choose between either a "WYSIWYG" editor
or writing HTML manually.  And I can do it in an offline fashion, too, which
was one my main complaints about Wordpress.

So I'm happy.

Oh, and since I converted my blog, I also created a new look and feel for it.
I hope you like it.


h2(#flattring). Flattr'ing this

Since a few days, this blog features a Flattr link for anyone who is interested
in it.  Flattr is a micropayment platform and a great way to show your love and
appreciation to people that offer free online content.  I was tipped about this
one by a few readers, and have already received my first Flattrs.  I will put
the revenue I get out of this into other Flattr-aware blogs or open source
projects, to stimulate high-quality online content further.

!(center)/img/2010/09/flattr-logo.png!:https://flattr.com

!(right)/img/2010/09/flattr-this-button.png!

This site features a "Flattr this" button, on the "icon sidebar" on the right,
right under the Twitter button.  The icon uses minimal space, but provides an
instant link to the Flattr thing for that article, or, in case I consider the
article too small to be Flattr'able, to the general blog's Flattr thing.  You
can see where this one links to for the current page by hovering your mouse
over it.
