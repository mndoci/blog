#!/usr/bin/env ruby

require 'settings'

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#  rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#  “content/about.html”). To select all children, grandchildren, … of an
#  item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#  because “*” matches zero or more characters.

preprocess do
  sorted_articles.each do |p|
    if not p[:excerpt] then
      # Extract the excerpt from the body, if not already given explicitly.
      p[:excerpt] = p.raw_content.split("\n\n")[0]
    end

    if p[:excerpt] then
      p[:excerpt] = Nanoc3::Filters::RedCloth.new.run(p[:excerpt], :hard_breaks => false)
    end

    p[:source_url] = '/posts/' + p.slug
  end
end

# Static content (simply copied into output) {{{
compile '/static/css/*/' do
  filter :less

  if $use_minified_css then
    # compress CSS :)
    filter :rainpress
  end
end

compile '/static/js/*/' do
  # minify JS :)
  if $use_minified_js then
    filter :shellcmd, "java -jar scripts/js-compiler.jar"
  end
end

compile '/static/*/' do
  # don't compile
end

compile '/files/*/' do
  # don't compile
end

route '/static/css/*/' do
  path = @item.identifier.chop.gsub(/^\/static/, '')
  path + '.css'
end

route '/static/*/' do
  path = @item.identifier.chop.gsub(/^\/static/, '')
  path + '.' + @item[:extension]
end

route '/files/*/' do
  path = @item.identifier.chop.gsub(/^\/content/, '')
  path + '.' + @item[:extension]
end

# Google site verification
compile '/google*/' do
end

route '/google*/' do
  @item.identifier.chop + '.' + @item[:extension]
end
# }}}

# Compiling blog posts {{{
compile '/posts/' do
  filter :erb
  layout 'item'
  layout 'default'
end

compile '/posts/*/' do
    if $include_drafts or @item[:published] then
    filter :redcloth, :hard_breaks => false
    if $highlight_syntax then
      filter :colorize_syntax,
        :default_colorizer => :pygmentize,
        :pygmentize => { :encoding => "utf-8" }
    end
    layout 'post'
    if $add_disqus_comments then
      layout 'disqus_comments'
    end
    layout 'default'
  end
end

compile '/posts/*/', :rep => :rss_content do
    filter :redcloth, :hard_breaks => false
    filter :absolutify  # make links/images all absolute for RSS readers
end

route '/posts/*/', :rep => :rss_content do
  nil
end

route '/posts/*/' do
    if $include_drafts or @item[:published] then
    '/posts/' + @item.slug + '/index.html'
  end
end

# }}}

# Compiling the RSS feed {{{
compile '/feed/' do
  filter :erb
end

compile '/feed/', :rep => :old_feed do
  filter :erb
end

route '/feed/' do
  '/private_feed.xml'
end

route '/feed/', :rep => :old_feed do
  '/feed/index.html'
end
# }}}

# Blog post imagery {{{
compile '/img/postimgs/*/' do
end

compile '/img/*/' do
  # make images fit the blog's size
  if @item[:extension] == 'png' then
    filter :thumbnailize, :width => 580, :height => 800
    #if item[:extension] == "png"
    # filter :pngcrush, :level => 7
    #end
  end
end

route '/img/*/' do
  @item.identifier.chop + '.' + @item[:extension]
end
# }}}

# Home page {{{
compile '/' do
  filter :erb
  layout 'item'
  layout 'default'
end
# }}}

# About me + Flattr'ing {{{
compile '/about/' do
  filter :redcloth, :hard_breaks => false
  layout 'item'
  layout 'default'
end

compile '/flattring/' do
  filter :redcloth, :hard_breaks => false
  layout 'item'
  layout 'default'
end
# }}}

# {{{ .htaccess File
compile '/htaccess/' do
  filter :erb
end

route '/htaccess/' do
  '/.htaccess'
end
# }}}

compile '*' do
  filter :erb
  layout 'item'
  layout 'default'
end

route '*' do
  @item.identifier + 'index.html'
end

layout '*', :erb
