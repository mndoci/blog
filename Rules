#!/usr/bin/env ruby

require 'defaults'
begin
	require 'settings'
rescue LoadError => boom
	# All is fine
end

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#	 rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#	 “content/about.html”). To select all children, grandchildren, … of an
#	 item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#	 because “*” matches zero or more characters.

preprocess do
	sorted_articles.each do |p|
		if not p[:excerpt] then
			# Extract the excerpt from the body, if not already given explicitly.
			p[:excerpt] = p.raw_content.split("\n\n")[0]
		end

  		if p[:excerpt] then
			p[:excerpt] = Nanoc3::Filters::RedCloth.new.run(p[:excerpt], :hard_breaks => false)
		end

		p[:source_url] = '/posts/' + p.slug
	end
end

# Static content (simply copied into output) {{{
compile '/static/css/*/' do
	# compress CSS :)
	filter :rainpress
end

compile '/static/*/' do
	# don't compile
end

compile '/files/*/' do
	# don't compile
end

route '/static/*/' do
	path = @item.identifier.chop.gsub(/^\/static/, '')
	path + '.' + @item[:extension]
end

route '/files/*/' do
	path = @item.identifier.chop.gsub(/^\/content/, '')
	path + '.' + @item[:extension]
end
# }}}

# Compiling blog posts {{{
compile '/posts/' do
	filter :erb
	layout 'default'
end

compile '/posts/*/' do
    if $include_drafts or @item[:published] then
		layout 'post'
		filter :redcloth, :hard_breaks => false
		filter :colorize_syntax,
			:default_colorizer => :pygmentize,
			:pygmentize => { :encoding => "utf-8" }
		layout 'default'
	end
end

compile '/posts/*/', :rep => :alt_url do
    if $include_drafts or @item[:published] then
		layout 'redirect'
	end
end

# Exactly the same as alt_url, but a second one
compile '/posts/*/', :rep => :alt_url2 do
    if $include_drafts or @item[:published] then
		layout 'redirect'
	end
end

route '/posts/*/' do
    if $include_drafts or @item[:published] then
		'/posts/' + @item.slug + '/index.html'
	end
end

route '/posts/*/', :rep => :alt_url do
    if $include_drafts or @item[:published] then
		# We can safely add "/index.html", since we use Apache, so
		# both "/foo" and "/foo/" will work!
		@item[:alt_url] + "/index.html" if @item[:alt_url]
	end
end

# Exactly the same as alt_url, but a second one
route '/posts/*/', :rep => :alt_url2 do
    if $include_drafts or @item[:published] then
		# We can safely add "/index.html", since we use Apache, so
		# both "/foo" and "/foo/" will work!
		@item[:alt_url2] + "/index.html" if @item[:alt_url2]
	end
end

# }}}

# Blog post imagery {{{
compile '/img/postimgs/*/' do
end

compile '/img/*/' do
	# make images fit the blog's size
	if @item[:extension] == 'png' then
		filter :thumbnailize, :width => 580, :height => 800
		#if item[:extension] == "png"
		#	filter :pngcrush, :level => 7
		#end
	end
end

route '/img/*/' do
	@item.identifier.chop + '.' + @item[:extension]
end
# }}}

# Home page {{{
compile '/' do
	filter :erb
	layout 'default'
end
# }}}

# About me {{{
compile '/about/' do
	filter :erb
	filter :redcloth, :hard_breaks => false
	layout 'default'
end
# }}}

compile '/migrations/' do
	filter :erb
end

route '/migrations/' do
	'/migrations.csv'
end

compile '*' do
	filter :erb
	layout 'default'
end

route '*' do
	@item.identifier + 'index.html'
end

layout '*', :erb
